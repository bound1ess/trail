#!/usr/bin/env python3
from binaryornot.check import is_binary
import os, subprocess, time

def get_storage_path():
  return os.path.join(os.getcwd(), '.trail')

def transform_path(path):
  return path.replace('/', '_')

def get_checksum_file_path(file_path):
  return os.path.join(get_storage_path(), transform_path(file_path))

def accept_path(path):
  black_list = ['vendor', 'node_modules', 'bower_components', '.git', '.trail']
  for item in black_list:
    if item in path:
      return False
  return True

def accept_file(file_path):
  return not is_binary(file_path)

def calculate_checksum(path):
  out = subprocess.check_output('md5sum %s' % path, shell=True).decode('utf-8')
  return out.split(' ')[0]

def check_file(file_path):
  handler = open(file_path, 'r')
  errors = []
  line_idx = 1
  for line in handler:
    if not (line == line.rstrip() + '\n'):
      errors.append([line, line_idx])
    line_idx += 1
  handler.close()
  return errors

def file_was_changed(file_path, checksum):
  checksum_file_path = get_checksum_file_path(file_path)
  # check if this file is new
  if not os.path.exists(checksum_file_path):
    return True
  else:
    handler = open(checksum_file_path, 'r')
    old_checksum = handler.read()
    handler.close()
    return not (checksum == old_checksum)

def update_checksum(file_path, checksum):
  checksum_file_path = get_checksum_file_path(file_path)
  handler = open(checksum_file_path, 'w')
  handler.write(checksum)
  handler.close()

def format_green_text(text):
  return '\033[1;32m%s\033[0m' % text

def format_red_text(text):
  return '\033[1;31m%s\033[0m' % text

def format_yellow_text(text):
  return '\033[1;33m%s\033[0m' % text

def format_blue_text(text):
  return '\033[1;34m%s\033[0m' % text

# first, ensure that the required directory exists
if not os.path.exists(get_storage_path()):
  os.mkdir(get_storage_path())

accepted_files = []
start_time = time.time()

# then, collect files
for dir_path, subdir_list, file_list in os.walk(os.getcwd()):
  if not accept_path(dir_path):
    continue
  for file_name in file_list:
    file_path = os.path.join(dir_path, file_name)
    if accept_file(file_path):
      accepted_files.append(file_path)

found_errors = []

# now collect errors
for file_path in accepted_files:
  checksum = calculate_checksum(file_path)
  if file_was_changed(file_path, checksum):
    # check for errors, update the sum
    errors = check_file(file_path)
    if len(errors) == 0:
      update_checksum(file_path, checksum)
    else:
      found_errors.append([file_path, errors])

# now display the errors to the user
for file_path, errors in found_errors:
  error_message = format_red_text('%d error(s)' % len(errors))
  print('Found %s in %s:' % (error_message, format_green_text(file_path)))
  for line, line_number in errors:
    line_number_message = format_blue_text(str(line_number))
    print('  line %s [%s].' % (line_number_message, format_yellow_text(line.strip())))

elapsed_time = time.time() - start_time
print('Elapsed time: %.3f second(s).' % elapsed_time)

# vim: set syntax=python:
