#!/usr/bin/env ruby

class LintError
    # attr_reader :file, :line

    def initialize(file, line)
        raise ArgumentError unless file.is_a?(String) and line.is_a?(Fixnum)

        @file, @line = file, line
    end

    def to_s
        "Found trailing whitespace(s) in #{@file}, line #{@line.to_s}."
    end
end

class LintErrorFinder

    def initialize
        @messages = Array.new
    end

    def search_file(file)
        line_number = 0
        extra = $/.size

        File.read(file).each_line { |line|
            line_number += 1

            if not (line.rstrip.size + extra) == line.size
                add_message(file, line_number)
            end
        }
    end

    def search_dir(dir)
        Dir[dir + '/**/*'].each { |file|
            search_file(file)
        }
    end

    def flush_messages
        messages  = @messages
        @messages = Array.new

        messages
    end

    private
    def add_message(file, line)
        @messages.push LintError.new(file, line)
    end
end

if ARGV.empty?
    puts 'Incorrect usage of Trail.'
    exit
end

path, finder = ARGV.first, LintErrorFinder.new

# Get messages.
if Dir.exists?(path)
    finder.search_dir(path)
elsif File.exists?(path)
    finder.search_file(path)
else
    puts 'Invalid path argument was supplied.'
    exit
end

messages = finder.flush_messages

# Display found errors.
if messages.empty?
    puts 'Great job!'
else
    for message in messages
        puts message
    end
end
